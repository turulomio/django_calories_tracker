from base64 import b64encode
from calories_tracker.reusing.datetime_functions import dtnaive2string
from calories_tracker.reusing.responses_json import json_data_response
from calories_tracker import __version__
from datetime import datetime
from django.utils.translation import gettext as _
from mimetypes import guess_type
from os import path
from unogenerator import ODT

def response_report_elaboration(request, elaboration):
    template=f"{path.dirname(__file__)}/templates/ReportElaboration.odt"
    filename='/tmp/Elaboration-{}.pdf'.format(dtnaive2string(datetime.now(), "%Y%m%d%H%M"))
    with ODT(template) as doc:

        doc.setMetadata( 
            _("Recipe elaboration"),  
            _("This is an automatic generated report from Calories Tracker"), 
            "Turulomio", 
            "CaloriesTracker-{}".format(__version__)
        )
        
        
        doc.find_and_replace("__TITLE__", elaboration.recipes.name)
        doc.find_and_replace("__SUBTITLE__", _("Generated by Calories Tracker v{}").format(__version__))
        doc.find_and_replace("__DATETIME__", str(doc.statistics.init))
        
        doc.find_and_replace("__INGREDIENTS__", "")
        for ingredient in elaboration.elaborations_products_in.all():
            doc.addParagraph(ingredient.fullname())
        

        doc.find_and_delete_until_the_end_of_document('Styles to remove')    
        
        # Document Generation
        doc.export_pdf(filename)
    return json_response_file(filename)
    
def json_response_file(filename):
    with open(filename, "rb") as pdf:
        encoded_string = b64encode(pdf.read())
        r={"filename":path.basename(filename),  "mime": guess_type(filename)[0],  "data":encoded_string.decode("UTF-8")}
        return json_data_response( True, r,  _("OK"))
